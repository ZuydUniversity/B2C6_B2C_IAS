- name: Configure Production VMs
  hosts: production
  become: yes
  tasks:
    - name: Update packages list
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - ca-certificates
          - curl
          - openssl
          - nginx
        state: present

    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"

    - name: Add Docker repository to Apt sources
      shell: |
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update

    - name: Install Docker on system
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Ensure Docker is running
      service:
        name: docker
        state: started

    - name: Update Dynamic DNS Record
      shell: curl "{{ DDNS_LINK }}"
      register: ddns_result

    - name: Check DDNS update result
      debug:
        var: ddns_result.stdout

    - name: Create SSL certs directory
      file:
        path: "/etc/nginx/certs"
        state: directory

    - name: Generate SSL certificate and private key
      command: >
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/nginx/certs/nginx-selfsigned.key \
        -out /etc/nginx/certs/nginx-selfsigned.crt \
        -subj "/CN=myolink.info.gf"
      args:
        creates:
          - /etc/nginx/certs/nginx-selfsigned.crt
          - /etc/nginx/certs/nginx-selfsigned.key

    - name: Write Nginx configuration file
      copy:
        content: |
          server {
              listen 443 ssl;
              server_name myolink.info.gf;

              ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt;
              ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
              }
          }
        dest: "/etc/nginx/sites-available/myolink.conf"

    - name: Enable SSL site
      file:
        src: "/etc/nginx/sites-available/myolink.conf"
        dest: "/etc/nginx/sites-enabled/myolink.conf"
        state: link

    - name: Ensure Nginx service is running and enabled
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Create Compose file
      copy:
        content: |
          # docker-compose.yml
          name: ansible-compose-stack
          services:
            frontend:
              image: snailcape/cipipelinetest
              restart: always
              ports:
                - 8080:5000
              networks:
                - app-network

            backend:
              image: ichishihoness/my-backend:latest
              restart: always
              ports: 
                - 8000:8000
              links:
                - db
              environment:
                DB_USER: "{{ DB_USER }}"
                DB_PASSWORD: "{{ DB_PASSWORD }}"
                DB_HOST: db
                DB_NAME: "{{ DB_NAME }}"
              networks:
                - app-network

            db:
              image: mariadb:latest
              restart: always
              environment:
                MYSQL_ROOT_PASSWORD: "{{ DB_PASSWORD }}"
              volumes:
                - db_data:/var/lib/mysql
              ports:
                - 3306:3306
              networks:
                - app-network
                
            watchtower:
              image: containrrr/watchtower
              restart: always
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
              command: --cleanup --interval 300

          networks:
            app-network:

          volumes:
            db_data:
        dest: /tmp/dockercompose-file

    - name: Launch Docker Compose
      ansible.builtin.command: docker compose -f /tmp/dockercompose-file up --detach
